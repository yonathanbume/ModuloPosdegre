using AKDEMIC.CORE.Structs;
using AKDEMIC.ENTITIES.Models.Generals;
using AKDEMIC.ENTITIES.Models.JobExchange;
using AKDEMIC.REPOSITORY.Repositories.Generals.Templates.User;
using AKDEMIC.REPOSITORY.Repositories.Intranet.Templates.SurveyUser;
using AKDEMIC.REPOSITORY.Repositories.Scale.Templates.SuneduReport;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

namespace AKDEMIC.SERVICE.Services.Generals.Interfaces
{
    public interface IUserService
    {
        /*prueba  implemetacion*/
        Task<DataTablesStructs.ReturnedData<object>> GetUserDataTable(DataTablesStructs.SentParameters parameters1, string search);

        Task<List<string>> GetAllEmails(List<string> userId);
        Task<object> GetOnlyAdministrative(Select2Structs.RequestParameters requestParameters, string searchedValue);
        Task<bool> Any(string id);
        Task<bool> AnyByUserName(string userName, string ignoredId = null);
        Task<bool> AnyByUserNameIgnoreQueryFilter(string userName, string ignoredId = null);
        Task<bool> AnyByEmail(string email, string ignoredId = null, string dni = null);
        Task<bool> AnyByEmailIgnoreQueryFilter(string email, string ignoredId = null, string dni = null);
        Task<List<AdministrativeSuneduReportTemplate>> GetSuneduReportForAdministrative(Guid termId);
        Task<List<TeacherSuneduReportTemplate>> GetSuneduReportForTeacher(Guid termId);
        Task<List<TeacherSuneduReportTemplate>> GetSuneduC9ReportForTeacher(Guid termId);
        Task<List<S3TeacherSuneduReportTemplate>> GetSuneduS3ReportForTeacher(Guid termId);
        Task<List<ApplicationUser>> SearchByEmail(string email);
        Task<ApplicationUser> GetIgnoreQueryFilter(string id);
        Task<ApplicationUser> GetByUserNameIgnoreQueryFilter(string userName);
        Task<ApplicationUser> Get(string id);
        Task<ApplicationUser> GetWithGeoLocation(string id);
        Task<List<SurveyUserTemplate>> GetSurveyJobExchangeUsers(Guid companyId, int status, string rol, List<Guid> graduationTerms, string searchValue = null, Guid? careerId = null, ClaimsPrincipal user = null);
        Task<List<SurveyUserTemplate>> GetSurveyUsersToSend(List<string> users);
        IQueryable<ApplicationUser> GetAllIQueryable();
        Task<List<ApplicationUser>> GetAllByEmail(string email);
        Task<IEnumerable<ApplicationUser>> GetAll();
        Task<IEnumerable<ApplicationUser>> GetAllStudents();
        Task<IEnumerable<ApplicationUser>> GetAllByDni(string dni);
        Task<IEnumerable<ApplicationUser>> GetDependencyUsers();
        Task<IEnumerable<ApplicationUser>> GetSurveyIntranetUsers(string rol, List<int> academicYears, bool onlyEnrolled = false, Guid? careerId = null, Guid? facultyId = null, Guid? specialtyId = null, Guid? academicDepartmentId = null);
        Task<IEnumerable<ApplicationUser>> GetBySearchValue(string searchValue);
        Task<ApplicationUser> GetByUserName(string userName);
        Task<ApplicationUser> GetByUserNameWithoutSpecialChars(string userName);
        Task<ApplicationUser> GetByBankDocument(string document);
        Task<ApplicationUser> GetByEmail(string email);
        Task<ApplicationUser> GetByEmailFirst(string email, string id);
        Task<ApplicationUser> GetReniecUserByDni(string dni);
        Task<ApplicationUser> GetUserByEmail(string email);
        Task<Select2Structs.ResponseParameters> GetDependencyUsersSelect2(Select2Structs.RequestParameters requestParameters, string searchValue = null);
        Task<Select2Structs.ResponseParameters> GetExternalUsersToInterestGroupSelect2(Select2Structs.RequestParameters requestParameters, string searchValue = null);
        Task<DataTablesStructs.ReturnedData<object>> GetUsersBySurveyJobExchangeGeneralDatatable(DataTablesStructs.SentParameters sentParameters, Guid surveyId, Guid careerId, Guid facultyId);
        Task<DataTablesStructs.ReturnedData<ApplicationUser>> GetUsersDatatable(DataTablesStructs.SentParameters sentParameters, string searchValue = null, string role = null, IEnumerable<string> exceptionRoles = null);
        Task<DataTablesStructs.ReturnedData<object>> GetOlderAdministrativeDatatable(DataTablesStructs.SentParameters sentParameters, string search = null);
        Task<DataTablesStructs.ReturnedData<object>> GetSurveyJobExchangeUsersDatatable(DataTablesStructs.SentParameters sentParameters, Guid companyId , int status, string rol, List<Guid> graduationTerms, string searchValue = null, Guid? careerId = null, ClaimsPrincipal user = null);
        Task<DataTablesStructs.ReturnedData<object>> GetSurveyIntranetUsersDatatable(DataTablesStructs.SentParameters sentParameters, string rol, List<int> academicYears, bool onlyEnrolled = false, Guid? careerId = null, Guid? facultyId = null, Guid? specialtyId = null, Guid? academicDepartmentId = null);
        Task<DataTablesStructs.ReturnedData<object>> GetScaleIgnoreQueryFilterUsersDatatable(DataTablesStructs.SentParameters sentParameters,int? state = null, string searchValue = null, int? userType = null);
        Task<DataTablesStructs.ReturnedData<object>> GetScaleGeographicalUsersDatatable(DataTablesStructs.SentParameters sentParameters, string searchValue = null);
        Task<List<UserScaleInformation>> GetScaleGeographicalUsersReport();
        Task<Select2Structs.ResponseParameters> GetUsersSelect2(Select2Structs.RequestParameters requestParameters, string searchValue = null);
        Task<Select2Structs.ResponseParameters> GetDependencyUsersSelect2ByDependency(Select2Structs.RequestParameters requestParameters, Guid dependency, string searchValue = null);
        Task<Select2Structs.ResponseParameters> GetUsersByRoleNameSelect2(Select2Structs.RequestParameters requestParameters, string roleName = null, string searchValue = null);
        Task<DataTablesStructs.ReturnedData<ApplicationUser>> GetExternalUsersToInterestGroupDatatable(DataTablesStructs.SentParameters sentParameters, string searchValue = null);
        Task Delete(ApplicationUser user);
        Task Update(ApplicationUser user);
        Task<int> CountSurveyIntranetUsers(string rol, List<int> academicYears, bool onlyEnrolled = false, Guid? careerId = null, Guid? facultyId = null, Guid? specialtyId = null, Guid? academicDepartmentId = null);
        Task<int> CountSurveyJobExchangeUsersDatatable(Guid companyId, int status, string rol, List<Guid> graduationTerms, string searchValue = null, Guid? careerId = null, ClaimsPrincipal user = null);
        Task<int> CountWorkers();
        Task<object> SearchByTerm(string term, bool showStudents = false, bool showTeachers = false);
        Task RemoveFromRole(ApplicationUser user, string roleName);
        Task RemoveFromRole(ApplicationUser user, ApplicationRole role);
        Task RemoveFromRoles(ApplicationUser user, IEnumerable<string> roleNames);
        Task RemoveFromRoles(ApplicationUser user, IEnumerable<ApplicationRole> roles);
        Task AddToRole(ApplicationUser user, string roleName);
        Task AddToRoles(ApplicationUser user, IEnumerable<string> roleNames);
        Task<IEnumerable<string>> GetRoles(ApplicationUser user);
        Task<ApplicationUser> Add(ApplicationUser user);
        Task Insert(ApplicationUser user);
        Task<ApplicationUser> GetUserByClaim(ClaimsPrincipal user);
        string GetUserIdByClaim(ClaimsPrincipal user);
        Task<ApplicationUser> GetUserById(string userId);
        Task<ApplicationUser> GetDeletedUserById(string userId);
        Task<ApplicationUser> GetUserWithDependecies(string userId);
        Task<IEnumerable<Select2Structs.Result>> GetUsersByRolesSelect2ClientSide(IEnumerable<string> roles);
        Task<DataTablesStructs.ReturnedData<object>> GetUsersForEvaluationAndInvestigationDatatable(DataTablesStructs.SentParameters sentParameters, IEnumerable<string> roles, byte? role, byte type, Guid? careerId = null, Guid? facultyId = null, string search = null);
        Task<bool> AnyUserByEmail(string userId, string email);
        Task<Select2Structs.ResponseParameters> GetUsersForInvestigationAndEvalutionSelect2(Select2Structs.RequestParameters requestParameters, string searchValue = null);
        Task<string> GetLastByPrefix(string prefix);
        Task<string> GetUserWithCodeExist(string userCodePrix);
        Task<DataTablesStructs.ReturnedData<object>> GetUserCashierDatatable(DataTablesStructs.SentParameters sentParameters, string search = null);
        Task<ApplicationUser> GetUserByStudent(Guid studentId);
        Task<ApplicationUser> GetDependencyUserByUserDependency(Guid? dependencyId = null);
        Task<string> GetNameComplete(string userId);
        Task<object> GetUserJson(string term);
        Task<Select2Structs.ResponseParameters> GetUsersByDependencyIdSelect2(Select2Structs.RequestParameters requestParameters, Guid dependecyId, string searchValue);
        Task<ApplicationUser> GetWithData(string userId);
        Task<DataTablesStructs.ReturnedData<object>> GetAcademicRecordUsers(DataTablesStructs.SentParameters sentParameters, string search = null);
        Task<object> GetUsersTreasurySelect2(Select2Structs.RequestParameters requestParameters, string searchValue = null);
        Task<bool> AnyByDni(string dni, string ignoredId = null);
        Task<List<FavoriteCompany>> GetAllFavoriteCompaniesFromUser(string userId);
        Task<string> GetPersonalizedEmailPassword(string username);
        Task<bool> AnyByDniAndUserName(string dni, string username, string ignoredId = null);
        Task<Select2Structs.ResponseParameters> Select2WithOutStudentRole(Select2Structs.RequestParameters requestParameters, string searchValue = null);
        Task<object> GetNonStudentUsersSelect2(string term, List<string> filteredUsers = null);
        Task<object> GetUSersSelect2CLientSideToSisco(string term);
        Task<Select2Structs.ResponseParameters> GetUsersByTypeSelect2(Select2Structs.RequestParameters requestParameters,int? userType = null, string searchValue = null);
        Task UpdateUsersPasswordJob(string connectionString);
        Task UpdateUserFullNameJob();
        Task SaveChanges();
        Task LoadUsersFullNameJob();
        Task<DataTablesStructs.ReturnedData<object>> GetTeachersAndStudents(DataTablesStructs.SentParameters sentParameters, Guid? careerId, int type, string searchValue = null);
        Task<DataTablesStructs.ReturnedData<object>> GetPreuniversitaryStudentsDatatable(DataTablesStructs.SentParameters sentParameters, Guid preuniversitaryTermId, string searchValue = null);
        Task<DataTablesStructs.ReturnedData<object>> GetScaleUsersDatatable(DataTablesStructs.SentParameters sentParameters, string searchValue = null, int? userType = null);
        Task<DataTablesStructs.ReturnedData<object>> GetScaleContractUsersDatatable(DataTablesStructs.SentParameters sentParameters, Guid? conditionId = null, Guid? dedicationId = null, string searchValue = null);
        Task<DataTablesStructs.ReturnedData<object>> GetJobExchangeUsersDatatable(DataTablesStructs.SentParameters sentParameters, string searchValue = null, string rolId = null);
        Task<List<string>> GetJobExchangeUsersEmails(string searchValue = null, string rolId = null);
        Task<DataTablesStructs.ReturnedData<object>> GetScaleBenefitDatatable(DataTablesStructs.SentParameters sentParameters, string searchValue = null);
        Task<ApplicationUser> GetByFullName(string fullName);
        Task<ApplicationUser> GetByUserWeb(string userWeb);
        Task<string> ShowPasswordHint(string userName, string userWeb);
        Task<object> GetUsersAuthoritySelect2ServerSide(string search);
        Task<object> GetUsersStudentsSelect2ServerSide(string search);
        Task<object> GetAllUsersSelect2ServerSide(string search);
        Task<DataTablesStructs.ReturnedData<object>> GetUserWithDoctoralDegreeDatatable(DataTablesStructs.SentParameters parameters, string searchValue);
        Task<DataTablesStructs.ReturnedData<object>> GetUserWithMasterDegreeDatatable(DataTablesStructs.SentParameters parameters, string searchValue);
        Task<DataTablesStructs.ReturnedData<object>> GetUsersWithTrainingDatatable(DataTablesStructs.SentParameters parameters, string searchValue); 
        Task<bool> AnyWithSameEmail(string userId, string email);
        Task<ApplicationUser> GetAdminitrativeByUserId(string userId);
        Task<DataTablesStructs.ReturnedData<object>> GetUsersManagementDatatable(DataTablesStructs.SentParameters sentParameters, string search = null);
        Task<DataTablesStructs.ReturnedData<object>> GetLockedUsersDatatable(DataTablesStructs.SentParameters sentParameters, string search = null);
        Task<DataTablesStructs.ReturnedData<object>> GetUsersDatatableByType(DataTablesStructs.SentParameters sentParameters, byte type, string search, List<string> roles = null);
    }
}