@model AKDEMIC.INTRANET.Areas.Admin.Models.RankingViewModels.NewStudentRankingPdfViewModel
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" href="~/css/pages/pdf/rankingreportspdf.css" />
    <style>
        .ranking-table tr {
            font-size: small;
        }
    </style>
</head>
<body>
    <h2 class="document-title">RANKING DE INGRESANTES POR ESCUELA PROFESIONAL/SEMESTRE DE INGRESO-EGRESO</h2>
    <p class="filter-info">
        <label class="label uppercase">Escuela Profesional:</label>
        <span class="label uppercase">@(string.IsNullOrEmpty(Model.NewStudentFilterInformation.Career) ? "Todas" : Model.NewStudentFilterInformation.Career)</span>
    </p>
    <p class="filter-info">
        <label class="label uppercase">Semestre de Ingreso:</label>
        <span class="label uppercase">@(string.IsNullOrEmpty(Model.NewStudentFilterInformation.AdmissionTermHyphenated) ? "Todos" : Model.NewStudentFilterInformation.AdmissionTermHyphenated)</span>
    </p>
    <p class="filter-info">
        <label class="label uppercase">Estado:</label>
        <span class="label uppercase">@(string.IsNullOrEmpty(Model.NewStudentFilterInformation.Status) ? "Todos" : Model.NewStudentFilterInformation.Status)</span>
    </p>
    <table class="ranking-table">
        <thead>
            <tr>
                <th>N</th>
                <th>CODIGO</th>
                <th>DNI</th>
                <th>APELLIDOS, NOMBRES</th>
                <th>CARR.</th>
                @*@if (string.IsNullOrEmpty(Model.NewStudentFilterInformation.Career))
                    {
                    }*@
                <th>CURR.</th>
                <th>SEDE INGR.</th>
                <th>SEDE ACTU.</th>
                <th>SEM. INGRESO</th>
                @*@if (string.IsNullOrEmpty(Model.NewStudentFilterInformation.AdmissionTerm))
                    {
                    }*@
                <th>SEM. ULTIMO</th>
                <th>PROM. ULTIMO</th>
                <th>SEM. EGRESO</th>
                <th>PROM. EGRESO</th>
                <th>ESTADO</th>
                @*@if (string.IsNullOrEmpty(Model.NewStudentFilterInformation.Status))
                    {
                    }*@
                <th>CICL. ACTUAL</th>
                @{
                    var maxMeritType = Model.NewStudentSummaries.Max(x => x.MeritType);
                    maxMeritType = maxMeritType == ConstantHelpers.ACADEMIC_ORDER.UPPER_TENTH
                        ? ConstantHelpers.ACADEMIC_ORDER.UPPER_FIFTH : maxMeritType;
                }
                @if (maxMeritType.HasValue)
                {
                    for (var i = ConstantHelpers.ACADEMIC_ORDER.UPPER_THIRD; i <= maxMeritType; ++i)
                    {
                <th>@ConstantHelpers.ACADEMIC_ORDER.SHORT_VALUES.GetValueOrDefault(i).ToUpper()</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var summary in Model.NewStudentSummaries)
            {
            <tr>
                <td>@summary.Position</td>
                <td>@summary.Code</td>
                <td>@summary.Dni</td>
                <td>@summary.Name</td>
                @if (string.IsNullOrEmpty(Model.NewStudentFilterInformation.Career))
                    {
                <td>@summary.CareerCode</td>
                    }
                    else
                    {
                <td>@Model.NewStudentFilterInformation.CareerCode</td>
                    }
                <td>@summary.CurriculumCode</td>
                <td>@summary.FirstCampus</td>
                <td>@summary.CurrentCampus</td>
                @if (string.IsNullOrEmpty(Model.NewStudentFilterInformation.AdmissionTerm))
                    {
                <td>@summary.AdmissionTerm</td>
                    }
                    else
                    {
                <td>@Model.NewStudentFilterInformation.AdmissionTerm</td>
                    }
                <td>@(string.IsNullOrEmpty(summary.LastTerm) ? "---" : summary.LastTerm)</td>
                <td>@(summary.LastWeightedAverageGrade.HasValue ? summary.LastWeightedAverageGrade.Value.ToString("0.0000") : "---")</td>
                <td>@(string.IsNullOrEmpty(summary.GraduationTerm) ? "---" : summary.GraduationTerm)</td>
                <td>@(summary.GraduationWeightedAverageGrade.HasValue ? summary.GraduationWeightedAverageGrade.Value.ToString("0.0000") : "---")</td>
                @if (string.IsNullOrEmpty(Model.NewStudentFilterInformation.Status))
                    {
                <td>@summary.Status</td>
                    }
                    else
                    {
                <td>@Model.NewStudentFilterInformation.Status</td>
                    }
                <td>@summary.CurrentAcademicYear</td>
                @if (maxMeritType.HasValue)
                    {
                        for (var i = ConstantHelpers.ACADEMIC_ORDER.UPPER_THIRD; i <= maxMeritType; ++i)
                        {
                <td class="underline">
                    @if (summary.MeritType.HasValue && summary.MeritType >= i)
                                {
                    @ConstantHelpers.ACADEMIC_ORDER.SHORT_VALUES.GetValueOrDefault(i).ToUpper()
                                }
                </td>
                        }
                    }
            </tr>
            }
        </tbody>
    </table>
</body>
</html>
