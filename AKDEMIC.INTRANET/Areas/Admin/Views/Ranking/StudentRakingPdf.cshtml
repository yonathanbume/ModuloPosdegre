@model AKDEMIC.INTRANET.Areas.Admin.Models.RankingViewModels.StudentRankingPdfViewModel
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" href="~/css/pages/pdf/rankingreportspdf.css" />
    <style>
        .filter-info {
            margin-block-start: 0;
            margin-block-end: 0;
        }

            .filter-info:nth-of-type(2) {
                margin-bottom: 0;
            }

            .filter-info:nth-of-type(3) {
                margin-top: 0;
            }

        .ranking-table tr {
            font-size: small;
        }
    </style>
</head>
<body>
    <h2 class="document-title">CUADRO DE MERITOS POR PROMEDIO PONDERADO/SEMESTRE</h2>
    <p class="filter-info">
        <label>Escuela Profesional:</label>
        <span class="value">@(string.IsNullOrEmpty(Model.FilterInformation.Career) ? "Todas" : Model.FilterInformation.Career)</span>
    </p>
    <p class="filter-info">
        <label>Sede:</label>
        <span class="value">@(string.IsNullOrEmpty(Model.FilterInformation.Campus) ? "Todas" : Model.FilterInformation.Campus)</span>
    </p>
    <p class="filter-info">
        <label>Semestre:</label>
        <span class="value">@Model.FilterInformation.Term</span>
    </p>
    <table class="ranking-table">
        <thead>
            <tr>
                <th>N</th>
                <th>CICLO</th>
                <th>CODIGO</th>
                @if (string.IsNullOrEmpty(Model.FilterInformation.Career))
                {
                <th>ESCUELA</th>
                }
                @if (string.IsNullOrEmpty(Model.FilterInformation.Campus))
                {
                <th>SEDE</th>
                }
                <th>APELLIDOS, NOMBRES</th>
                <th>PROMEDIO</th>
                <th>CRED.</th>
                @{
                    var maxMeritType = Model.StudentSummaries.Max(x => x.MeritType);
                    maxMeritType = maxMeritType == ConstantHelpers.ACADEMIC_ORDER.UPPER_TENTH
                        ? ConstantHelpers.ACADEMIC_ORDER.UPPER_FIFTH : maxMeritType;
                }
                @if (maxMeritType.HasValue)
                {
                    for (var i = ConstantHelpers.ACADEMIC_ORDER.UPPER_THIRD; i <= maxMeritType; ++i)
                    {
                <th>@ConstantHelpers.ACADEMIC_ORDER.SHORT_VALUES.GetValueOrDefault(i).ToUpper()</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var summary in Model.StudentSummaries)
            {
            <tr>
                <td>@summary.Position</td>
                <td>@summary.AcademicYear</td>
                <td>@summary.Code</td>
                @if (string.IsNullOrEmpty(Model.FilterInformation.Career))
                    {
                <td>@summary.Career</td>
                    }
                @if (string.IsNullOrEmpty(Model.FilterInformation.Campus))
                    {
                <td>@summary.Campus</td>
                    }
                <td>@summary.Name</td>
                <td>@summary.WeightedAverageGrade.ToString("0.0000")</td>
                <td>@summary.Credits.ToString("0.00")</td>
                @*@summary.MeritOrder*@
                @if (maxMeritType.HasValue)
                    {
                        for (var i = ConstantHelpers.ACADEMIC_ORDER.UPPER_THIRD; i <= maxMeritType; ++i)
                        {
                <td class="underline">
                    @if (summary.MeritType.HasValue && summary.MeritType >= i)
                                {
                    @ConstantHelpers.ACADEMIC_ORDER.SHORT_VALUES.GetValueOrDefault(i).ToUpper()
                                }
                </td>
                        }
                    }
            </tr>
            }
        </tbody>
    </table>
</body>
</html>
